// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bilibili

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BilibiliClient is the client API for Bilibili service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BilibiliClient interface {
	GetDownloadInfo(ctx context.Context, in *Param, opts ...grpc.CallOption) (*DownloadInfo, error)
	GetInfo(ctx context.Context, in *Param, opts ...grpc.CallOption) (*Info, error)
}

type bilibiliClient struct {
	cc grpc.ClientConnInterface
}

func NewBilibiliClient(cc grpc.ClientConnInterface) BilibiliClient {
	return &bilibiliClient{cc}
}

func (c *bilibiliClient) GetDownloadInfo(ctx context.Context, in *Param, opts ...grpc.CallOption) (*DownloadInfo, error) {
	out := new(DownloadInfo)
	err := c.cc.Invoke(ctx, "/bilibili.Bilibili/GetDownloadInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bilibiliClient) GetInfo(ctx context.Context, in *Param, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/bilibili.Bilibili/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BilibiliServer is the server API for Bilibili service.
// All implementations must embed UnimplementedBilibiliServer
// for forward compatibility
type BilibiliServer interface {
	GetDownloadInfo(context.Context, *Param) (*DownloadInfo, error)
	GetInfo(context.Context, *Param) (*Info, error)
	mustEmbedUnimplementedBilibiliServer()
}

// UnimplementedBilibiliServer must be embedded to have forward compatible implementations.
type UnimplementedBilibiliServer struct {
}

func (UnimplementedBilibiliServer) GetDownloadInfo(context.Context, *Param) (*DownloadInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadInfo not implemented")
}
func (UnimplementedBilibiliServer) GetInfo(context.Context, *Param) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedBilibiliServer) mustEmbedUnimplementedBilibiliServer() {}

// UnsafeBilibiliServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BilibiliServer will
// result in compilation errors.
type UnsafeBilibiliServer interface {
	mustEmbedUnimplementedBilibiliServer()
}

func RegisterBilibiliServer(s grpc.ServiceRegistrar, srv BilibiliServer) {
	s.RegisterService(&Bilibili_ServiceDesc, srv)
}

func _Bilibili_GetDownloadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BilibiliServer).GetDownloadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.Bilibili/GetDownloadInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BilibiliServer).GetDownloadInfo(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bilibili_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BilibiliServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.Bilibili/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BilibiliServer).GetInfo(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

// Bilibili_ServiceDesc is the grpc.ServiceDesc for Bilibili service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bilibili_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.Bilibili",
	HandlerType: (*BilibiliServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDownloadInfo",
			Handler:    _Bilibili_GetDownloadInfo_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Bilibili_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili.proto",
}
